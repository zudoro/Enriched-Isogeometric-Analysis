	MODULE INTEGRATION

	USE GSQUAD
	USE NURBS_BASIS
	USE LOADFUNCTION

	implicit integer (i-n)
	implicit real(8) (a-h,o-z)

CONTAINS



!------------------INTEGRAL CODE FOR THE STIFFNESS MATRIX ELEMENT--------------
SUBROUTINE GEN_KF(STIF_K, LOAD_F)

	REAL*8, INTENT(OUT) :: STIF_K(2*DOF, 2*DOF), LOAD_F(2*DOF)
	TYPE(RECPATCH) :: IRBOX
	TYPE(POINT2D) :: GSPT, DMY_GSPT, LOAD_Q_VEC(NUMGSPT**2)
	TYPE(INT2D) :: INDX((BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1))
	TYPE(MATRIX_22) :: JACOB
	TYPE(FVALUE) :: SF(NUMGSPT**2, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1))
	INTEGER :: I,J, II, JJ, KK, N, GLOBAL_INDX(2)
	REAL*8 :: DIFF_XX, DIFF_YY, DIFF_XY, DIFF_YX, DIFF_XN, DIFF_YN, DIFF_NX, DIFF_NY, DIFF_NN, DET_M, WEIGHT(NUMGSPT**2)
	
	STIF_K(:,:) = 0.D0; LOAD_F(:) = 0.D0
	N = NUMGSPT
	DO JJ=1, NUMIR(2)-1
		DO II=1, NUMIR(1)-1
			IRBOX%PT1 = POINT2D(IR_GRID(1,II), IR_GRID(2,JJ))
			IRBOX%PT2 = POINT2D(IR_GRID(1,II+1), IR_GRID(2,JJ))
			IRBOX%PT3 = POINT2D(IR_GRID(1,II+1), IR_GRID(2,JJ+1))
			IRBOX%PT4 = POINT2D(IR_GRID(1,II), IR_GRID(2,JJ+1))
			!------------------! VECTORIZE GAUSS POINTS AND WEIGHTS------------------------------
			CALL GAULEG(IRBOX%PT1%X, IRBOX%PT2%X, GSX, GSXW, NUMGSPT)
			CALL GAULEG(IRBOX%PT1%Y, IRBOX%PT4%Y, GSY, GSYW, NUMGSPT)
			KK=0
			DO I=1,N
				DO J=1,N
					KK=KK+1
					GSPT = POINT2D(GSX(I), GSY(J))
					DMY_GSPT = GSPT
					JACOB = GET_JACOBIAN_MATRIX(GSPT)
					DET_M = .DETERMINANT.JACOB
					WEIGHT(KK) = DET_M*GSXW(I)*GSYW(J)
					LOAD_Q_VEC(KK) = LDFT2D(GSPT)
					CALL GET_ALL_PHY_BASIS_IN_INT(SF(KK,:), INDX, DMY_GSPT, JACOB)
				ENDDO
			ENDDO
			!--------------------EVALUATE INTEGRAND AT EACH GAUSS POINT IN SUBMATRIX-----------
			DO I = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
				DO KK=1, DOF
					IF (NDX(1,KK).EQ.INDX(I)%A .AND. NDX(2,KK).EQ.INDX(I)%B) THEN
						GLOBAL_INDX(1) = KK
						GOTO 111
					ENDIF
				ENDDO
				111 CONTINUE
				DO J = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
					DO KK=1, DOF
						IF (NDX(1,KK).EQ.INDX(J)%A .AND. NDX(2,KK).EQ.INDX(J)%B) THEN
							GLOBAL_INDX(2) = KK
							GOTO 222
						ENDIF
					ENDDO
					222 CONTINUE
					DIFF_XX = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D10, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), SF(:,J)%D10)
					DIFF_YY = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D01, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), SF(:,J)%D01)
					DIFF_YX = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D01, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), SF(:,J)%D10)
					DIFF_XY = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D10, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), SF(:,J)%D01)
					
! 				IF (SUB_MATRIX_INDX.EQ.11) THEN
					STIF_K(GLOBAL_INDX(1),GLOBAL_INDX(2)) = STIF_K(GLOBAL_INDX(1),GLOBAL_INDX(2)) + STRESS_E11*DIFF_XX + STRESS_E33*DIFF_YY
! 				ELSEIF (SUB_MATRIX_INDX.EQ.22) THEN
					STIF_K(DOF+GLOBAL_INDX(1),DOF+GLOBAL_INDX(2)) = STIF_K(DOF+GLOBAL_INDX(1),DOF+GLOBAL_INDX(2)) + STRESS_E22*DIFF_YY + STRESS_E33*DIFF_XX
! 				ELSEIF (SUB_MATRIX_INDX.EQ.12) THEN
					STIF_K(GLOBAL_INDX(1),DOF+GLOBAL_INDX(2)) = STIF_K(GLOBAL_INDX(1),DOF+GLOBAL_INDX(2)) + STRESS_E12*DIFF_XY + STRESS_E33*DIFF_YX
! 				ELSEIF (SUB_MATRIX_INDX.EQ.21) THEN
					STIF_K(DOF+GLOBAL_INDX(1),GLOBAL_INDX(2)) = STIF_K(DOF+GLOBAL_INDX(1),GLOBAL_INDX(2)) + STRESS_E21*DIFF_YX + STRESS_E33*DIFF_XY
! 					IF (GLOBAL_INDX(1).EQ.1 .AND. GLOBAL_INDX(2).EQ.2) THEN
! 						PRINT*, DIFF_NX
! 						PRINT*, STIF_K(GLOBAL_INDX(1),DOF+GLOBAL_INDX(2))
! 					ENDIF
				ENDDO
				DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), LOAD_Q_VEC(:)%X)
				LOAD_F(GLOBAL_INDX(1)) = LOAD_F(GLOBAL_INDX(1)) + DIFF_NN
				DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N**2, 2/), ORDER=ORDER1), 2), LOAD_Q_VEC(:)%Y)
				LOAD_F(DOF+GLOBAL_INDX(1)) = LOAD_F(DOF+GLOBAL_INDX(1)) + DIFF_NN
			ENDDO
		ENDDO
	ENDDO
	
! 	DO I=1, DOF
! 		DO J=I, DOF
! 			STIF_K(J,I) = STIF_K(I,J)
! 			STIF_K(DOF+J,DOF+I) = STIF_K(DOF+I,DOF+J)
! 			STIF_K(DOF+J,DOF+I) = STIF_K(DOF+I,DOF+J)
! 			STIF_K(DOF+J,I) = STIF_K(I,DOF+J)
! 			STIF_K(2*DOF+J,I) = STIF_K(I,2*DOF+J)
! 			STIF_K(2*DOF+J,DOF+I) = STIF_K(DOF+I,2*DOF+J)
! 		ENDDO
! 	ENDDO

! 	STIF_K(DOF+1:2*DOF,1:DOF) = TRANSPOSE(STIF_K(1:DOF,DOF+1:2*DOF))
! 	STIF_K(2*DOF+1:3*DOF,1:DOF) = TRANSPOSE(STIF_K(1:DOF,2*DOF+1:3*DOF))
! 	STIF_K(2*DOF+1:3*DOF,DOF+1:2*DOF) = TRANSPOSE(STIF_K(DOF+1:2*DOF,2*DOF+1:3*DOF))

	WRITE(*,*)
	WRITE(*,*) '<<< ASSEMBLE STIFFNESS MATRIX AND LOAD VECTOR : DONE >>>'
	WRITE(*,*)
	
END SUBROUTINE GEN_KF

SUBROUTINE GEN_BD_LN(SUB_K, SUB_F, GAMMA)

	INTEGER, INTENT(IN) :: GAMMA
	REAL*8, INTENT(OUT) :: SUB_K(DIRICHLET_BDNDX(GAMMA,1)%LC_NUM, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM)
	TYPE(DISPLACEMENT), INTENT(OUT) :: SUB_F(DIRICHLET_BDNDX(GAMMA,1)%LC_NUM)
	TYPE(DISPLACEMENT) :: EXACT_ON_BD(NUMGSPT)
	TYPE(FVALUE) :: SF(NUMGSPT, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1))
	TYPE(INT2D) :: INDX((BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1))
	TYPE(POINT2D) :: GSPT, DMY_GSPT
	REAL*8 :: WEIGHT(NUMGSPT), DIFF_NN, DET_M, SUB_LN_LENGTH
	INTEGER :: I, J, II, JJ, KK, N, GLOBAL_INDX(2), SUB_NUMLN
	TYPE(VEC2D) :: SUB_LN
	TYPE(MATRIX_22) :: JACOB
	
	N = NUMGSPT; SUB_K(:,:)=0.D0; SUB_F(:) = DISPLACEMENT(0.D0,0.D0,0.D0); SUB_NUMLN = 2

	! LEFT
	DO JJ = 1, NUMIR(2)-1
! 		PRINT*, 'JJ',JJ
		SUB_LN_LENGTH = DABS(IR_GRID(2,JJ+1) - IR_GRID(2,JJ))/(1.D0*SUB_NUMLN)
		DO II=1, SUB_NUMLN
! 			PRINT*, 'II',II
			SUB_LN = VEC2D(POINT2D(0.D0,IR_GRID(2,JJ)+(II-1)*SUB_LN_LENGTH), POINT2D(0.D0,IR_GRID(2,JJ)+II*SUB_LN_LENGTH))
			DIFF_NN = 0.D0
			CALL GAULEG(SUB_LN%U%Y, SUB_LN%V%Y, GSY, GSYW, NUMGSPT)
			DO I=1,N
! 				PRINT*, 'I',I
				GSPT = POINT2D(0.D0, GSY(I))
				DMY_GSPT = GSPT
				JACOB = GET_JACOBIAN_MATRIX(DMY_GSPT)
				DET_M = .DETERMINANT.JACOB
				WEIGHT(I) = DET_M*GSYW(I)
				CALL GET_ALL_PHY_BASIS_IN_INT(SF(I,:), INDX, DMY_GSPT, JACOB)
				EXACT_ON_BD(I) = EX_DISP(DMY_GSPT,1)
			ENDDO
			DO I = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 				PRINT*, 'I',I
				DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 				PRINT*, 'KK',KK
					IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(I)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(I)%B) THEN
						GLOBAL_INDX(1) = KK
						GOTO 111
					ELSE
						GLOBAL_INDX(1) = 0
					ENDIF
				ENDDO
				111 CONTINUE
				DO J = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 					PRINT*, 'J',J
					DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 					PRINT*, 'KK',KK
						IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(J)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(J)%B) THEN
							GLOBAL_INDX(2) = KK
							GOTO 222
						ELSE
							GLOBAL_INDX(2) = 0
						ENDIF
					ENDDO
					222 CONTINUE
					IF (GLOBAL_INDX(1).EQ.0 .OR. GLOBAL_INDX(2).EQ.0) THEN
					ELSE
						DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), SF(:,J)%D00)
! 						PRINT*, 'DIFF-NN',DIFF_NN
						SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) = SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) + DIFF_NN
					ENDIF
				ENDDO
				IF (GLOBAL_INDX(1).EQ.0) THEN
				ELSE
					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIX)
					SUB_F(GLOBAL_INDX(1))%PIX = SUB_F(GLOBAL_INDX(1))%PIX + DIFF_NN
					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIY)
					SUB_F(GLOBAL_INDX(1))%PIY = SUB_F(GLOBAL_INDX(1))%PIY + DIFF_NN
				ENDIF
			ENDDO
		ENDDO
	ENDDO
	
! PRINT*, 'HERE D-2'

	! RIGHT
! 	DO JJ = 1, NUMIR(2)-1
! 		SUB_LN_LENGTH = DABS(IR_GRID(2,JJ+1) - IR_GRID(2,JJ))/(1.D0*SUB_NUMLN)
! 		DO II=1, SUB_NUMLN
! 			SUB_LN = VEC2D(POINT2D(1.D0,IR_GRID(2,JJ)+(II-1)*SUB_LN_LENGTH), POINT2D(1.D0,IR_GRID(2,JJ)+II*SUB_LN_LENGTH))
! 			DIFF_NN = 0.D0
! 			CALL GAULEG(SUB_LN%U%Y, SUB_LN%V%Y, GSY, GSYW, NUMGSPT)
! 			DO I=1,N
! 				GSPT = POINT2D(1.D0, GSY(I))
! 				DMY_GSPT = GSPT
! 				JACOB = GET_JACOBIAN_MATRIX(DMY_GSPT)
! 				DET_M = .DETERMINANT.JACOB
! 				WEIGHT(I) = DET_M*GSYW(I)
! 				CALL GET_ALL_PHY_BASIS_IN_INT(SF(I,:), INDX, DMY_GSPT, JACOB)
! 				EXACT_ON_BD(I) = EX_DISP(DMY_GSPT, 7)
! 			ENDDO
! 			DO I = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 				DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 					IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(I)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(I)%B) THEN
! 						GLOBAL_INDX(1) = KK
! 						GOTO 333
! 					ELSE
! 						GLOBAL_INDX(1) = 0
! 					ENDIF
! 				ENDDO
! 				333 CONTINUE
! 				DO J = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 					DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 						IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(J)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(J)%B) THEN
! 							GLOBAL_INDX(2) = KK
! 							GOTO 444
! 						ELSE
! 						GLOBAL_INDX(2) = 0
! 						ENDIF
! 					ENDDO
! 					444 CONTINUE
! 					IF (GLOBAL_INDX(1).EQ.0 .OR. GLOBAL_INDX(2).EQ.0) THEN
! 					ELSE
! 						DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), SF(:,J)%D00)
! ! 						PRINT*, 'DIFF-NN',DIFF_NN
! 						SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) = SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) + DIFF_NN
! 					ENDIF
! 				ENDDO
! 				IF (GLOBAL_INDX(1).EQ.0) THEN
! 				ELSE
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIX)
! 					SUB_F(GLOBAL_INDX(1))%PIX = SUB_F(GLOBAL_INDX(1))%PIX + DIFF_NN
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIY)
! 					SUB_F(GLOBAL_INDX(1))%PIY = SUB_F(GLOBAL_INDX(1))%PIY + DIFF_NN
! 				ENDIF
! 			ENDDO
! 		ENDDO
! 	ENDDO
! 	
! ! PRINT*, 'HERE D-3'
! 
! 	! BOTTOM
! 	DO JJ = 1, NUMIR(1)-1
! 		SUB_LN_LENGTH = DABS(IR_GRID(1,JJ+1) - IR_GRID(1,JJ))/(1.D0*SUB_NUMLN)
! 		DO II=1, SUB_NUMLN
! 			SUB_LN = VEC2D(POINT2D(IR_GRID(1,JJ)+(II-1)*SUB_LN_LENGTH,0.D0), POINT2D(IR_GRID(1,JJ)+II*SUB_LN_LENGTH,0.D0))
! 			DIFF_NN = 0.D0
! 			CALL GAULEG(SUB_LN%U%X, SUB_LN%V%X, GSX, GSXW, NUMGSPT)
! 			DO I=1,N
! 				GSPT = POINT2D(GSX(I),0.D0)
! 				DMY_GSPT = GSPT
! 				JACOB = GET_JACOBIAN_MATRIX(DMY_GSPT)
! 				DET_M = .DETERMINANT.JACOB
! 				WEIGHT(I) = DET_M*GSXW(I)
! 				CALL GET_ALL_PHY_BASIS_IN_INT(SF(I,:), INDX, DMY_GSPT, JACOB)
! 				EXACT_ON_BD(I) = EX_DISP(DMY_GSPT)
! 			ENDDO
! 			DO I = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 				DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 					IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(I)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(I)%B) THEN
! 						GLOBAL_INDX(1) = KK
! 						GOTO 555
! 					ELSE
! 						GLOBAL_INDX(1) = 0
! 					ENDIF
! 				ENDDO
! 				555 CONTINUE
! 				DO J = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 					DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 						IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(J)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(J)%B) THEN
! 							GLOBAL_INDX(2) = KK
! 							GOTO 666
! 						ELSE
! 						GLOBAL_INDX(2) = 0
! 						ENDIF
! 					ENDDO
! 					666 CONTINUE
! 					IF (GLOBAL_INDX(1).EQ.0 .OR. GLOBAL_INDX(2).EQ.0) THEN
! 					ELSE
! 						DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), SF(:,J)%D00)
! ! 						PRINT*, 'DIFF-NN',DIFF_NN
! 						SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) = SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) + DIFF_NN
! 					ENDIF
! 				ENDDO
! 				IF (GLOBAL_INDX(1).EQ.0) THEN
! 				ELSE
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIX)
! 					SUB_F(GLOBAL_INDX(1))%PIX = SUB_F(GLOBAL_INDX(1))%PIX + DIFF_NN
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIY)
! 					SUB_F(GLOBAL_INDX(1))%PIY = SUB_F(GLOBAL_INDX(1))%PIY + DIFF_NN
! 				ENDIF
! 			ENDDO
! 		ENDDO
! 	ENDDO
! 	
! ! PRINT*, 'HERE D-3'
! 
! 	! TOP
! 	DO JJ = 1, NUMIR(1)-1
! 		SUB_LN_LENGTH = DABS(IR_GRID(1,JJ+1) - IR_GRID(1,JJ))/(1.D0*SUB_NUMLN)
! 		DO II=1, SUB_NUMLN
! 			SUB_LN = VEC2D(POINT2D(IR_GRID(1,JJ)+(II-1)*SUB_LN_LENGTH,1.D0), POINT2D(IR_GRID(1,JJ)+II*SUB_LN_LENGTH,1.D0))
! 			DIFF_NN = 0.D0
! 			CALL GAULEG(SUB_LN%U%X, SUB_LN%V%X, GSX, GSXW, NUMGSPT)
! 			DO I=1,N
! 				GSPT = POINT2D(GSX(I),1.D0)
! 				DMY_GSPT = GSPT
! 				JACOB = GET_JACOBIAN_MATRIX(DMY_GSPT)
! 				DET_M = .DETERMINANT.JACOB
! 				WEIGHT(I) = DET_M*GSXW(I)
! 				CALL GET_ALL_PHY_BASIS_IN_INT(SF(I,:), INDX, DMY_GSPT, JACOB)
! 				EXACT_ON_BD(I) = EX_DISP(DMY_GSPT)
! 			ENDDO
! 			DO I = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 				DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 					IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(I)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(I)%B) THEN
! 						GLOBAL_INDX(1) = KK
! 						GOTO 777
! 					ELSE
! 						GLOBAL_INDX(1) = 0
! 					ENDIF
! 				ENDDO
! 				777 CONTINUE
! 				DO J = 1, (BASIS_KVEC(1)%POLY_ORDER+1)*(BASIS_KVEC(2)%POLY_ORDER+1)
! 					DO KK=1, DIRICHLET_BDNDX(GAMMA,1)%LC_NUM
! 						IF (DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(1).EQ.INDX(J)%A .AND. DIRICHLET_BDNDX(GAMMA,KK)%LC_NDX(2).EQ.INDX(J)%B) THEN
! 							GLOBAL_INDX(2) = KK
! 							GOTO 888
! 						ELSE
! 						GLOBAL_INDX(2) = 0
! 						ENDIF
! 					ENDDO
! 					888 CONTINUE
! 					IF (GLOBAL_INDX(1).EQ.0 .OR. GLOBAL_INDX(2).EQ.0) THEN
! 					ELSE
! 						DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), SF(:,J)%D00)
! ! 						PRINT*, 'DIFF-NN',DIFF_NN
! 						SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) = SUB_K(GLOBAL_INDX(1), GLOBAL_INDX(2)) + DIFF_NN
! 					ENDIF
! 				ENDDO
! 				IF (GLOBAL_INDX(1).EQ.0) THEN
! 				ELSE
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIX)
! 					SUB_F(GLOBAL_INDX(1))%PIX = SUB_F(GLOBAL_INDX(1))%PIX + DIFF_NN
! 					DIFF_NN = DOT_PRODUCT(PRODUCT(RESHAPE((/SF(:,I)%D00, WEIGHT(:)/), (/N, 2/), ORDER=ORDER1), 2), EXACT_ON_BD(:)%PIY)
! 					SUB_F(GLOBAL_INDX(1))%PIY = SUB_F(GLOBAL_INDX(1))%PIY + DIFF_NN
! 				ENDIF
! 			ENDDO
! 		ENDDO
! 	ENDDO
! 		PRINT*, 'HERE D-4'
END SUBROUTINE GEN_BD_LN

TYPE(POINT2D) FUNCTION INT_F_LN(INDX_I, GAMMA)

	INTEGER, INTENT(IN) :: INDX_I(2), GAMMA
	
	TYPE(FUNCTION_2D) :: SF_I
	TYPE(TRANSFORM2D) :: GSPT
	REAL*8 :: DET_M, SUB_LN_LENGTH, TEST
	INTEGER :: I, J, II, JJ, KK, N, SUB_NUMLN
	TYPE(VEC2D) :: SUB_LN
	TYPE(MATRIX_22) :: JACOB
	TYPE(POINT2D) :: TRC(1), DIFF_NN, DMY_GSPT
	
	N = NUMGSPT; SUB_NUMLN = 2
	INT_F_LN = POINT2D(0.D0, 0.D0)

	IF (GAMMA==3) THEN
! 		TEST = 0.D0
		DO JJ = 1, NUMIR(2)-1
			SUB_LN_LENGTH = DABS(IR_GRID(2,JJ+1) - IR_GRID(2,JJ))/(1.D0*SUB_NUMLN)
			DO II=1, SUB_NUMLN
				SUB_LN = VEC2D(POINT2D(1.D0,IR_GRID(2,JJ)+(II-1)*SUB_LN_LENGTH), POINT2D(1.D0,IR_GRID(2,JJ)+II*SUB_LN_LENGTH))
				DIFF_NN = POINT2D(0.D0, 0.D0)
				CALL GAULEG(SUB_LN%U%Y, SUB_LN%V%Y, GSY, GSYW, NUMGSPT)
				DO I=1,N
					GSPT%PT = POINT2D(1.D0, GSY(I))
					DMY_GSPT = GSPT%PT
					DET_M = GET_DET_LN(DMY_GSPT, GAMMA)
					SF_I = GET_BASIS(DMY_GSPT,INDX_I)
					CALL TRACTION(TRC, (/DMY_GSPT/), GAMMA)
					DIFF_NN%X = DIFF_NN%X + SF_I%VAL(0,0)*TRC(1)%X*DET_M*GSYW(I)
					DIFF_NN%Y = DIFF_NN%Y + SF_I%VAL(0,0)*TRC(1)%Y*DET_M*GSYW(I)
! 					PRINT*, INDX_I, I, DET_M, SF_I%VAL(0,0), TRC(1)
! 					TEST = TEST + DET_M*GSYW(I)
				ENDDO
				INT_F_LN = INT_F_LN + DIFF_NN
			ENDDO
		ENDDO
! 		PRINT*, GAMMA, TEST
! 		PRINT*, INDX_I, INT_F_LN
! 		STOP
	ELSEIF (GAMMA==2) THEN
! 		TEST = 0.D0
! 		print*, gamma, 1, 1 + EXTRA_KNOTS(1)+1 - 1
		DO JJ = 1, NUMIR(1)-1
			SUB_LN_LENGTH = DABS(IR_GRID(1,JJ+1) - IR_GRID(1,JJ))/(1.D0*SUB_NUMLN)
			DO II=1, SUB_NUMLN
				SUB_LN = VEC2D(POINT2D(IR_GRID(1,JJ)+(II-1)*SUB_LN_LENGTH,1.D0), POINT2D(IR_GRID(1,JJ)+II*SUB_LN_LENGTH,1.D0))
				DIFF_NN = POINT2D(0.D0, 0.D0)
				CALL GAULEG(SUB_LN%U%X, SUB_LN%V%X, GSX, GSXW, NUMGSPT)
				DO I=1,N
					GSPT%PT = POINT2D(GSX(I),1.D0)
					DMY_GSPT = GSPT%PT
					DET_M = GET_DET_LN(DMY_GSPT, GAMMA)
					SF_I = GET_BASIS(DMY_GSPT,INDX_I)
					CALL TRACTION(TRC, (/DMY_GSPT/), GAMMA)
					DIFF_NN%X = DIFF_NN%X + SF_I%VAL(0,0)*TRC(1)%X*DET_M*GSXW(I)
					DIFF_NN%Y = DIFF_NN%Y + SF_I%VAL(0,0)*TRC(1)%Y*DET_M*GSXW(I)
! 					TEST = TEST + DET_M*GSXW(I)
! 					PRINT*, TEST, DET_M, GSXW(I)
				ENDDO
				INT_F_LN = INT_F_LN + DIFF_NN
			ENDDO
		ENDDO
! 		PRINT*, GAMMA, TEST
	ELSEIF (GAMMA==1) THEN
! 		TEST = 0.D0
! 		print*, gamma, (EXTRA_KNOTS(1)+1)+1, (EXTRA_KNOTS(1)+1)+1 + 2*EXTRA_KNOTS(1) + 2 - 1
		DO JJ = 1, NUMIR(1)-1
			SUB_LN_LENGTH = DABS(IR_GRID(1,JJ+1) - IR_GRID(1,JJ))/(1.D0*SUB_NUMLN)
			DO II=1, SUB_NUMLN
				SUB_LN = VEC2D(POINT2D(IR_GRID(1,JJ)+(II-1)*SUB_LN_LENGTH,0.D0), POINT2D(IR_GRID(1,JJ)+II*SUB_LN_LENGTH,0.D0))
				DIFF_NN = POINT2D(0.D0, 0.D0)
				CALL GAULEG(SUB_LN%U%X, SUB_LN%V%X, GSX, GSXW, NUMGSPT)
				DO I=1,N
					GSPT%PT = POINT2D(GSX(I),0.D0)
					DMY_GSPT = GSPT%PT
	! 				PRINT*, DMY_GSPT
					DET_M = GET_DET_LN(DMY_GSPT, GAMMA)
					SF_I = GET_BASIS(DMY_GSPT,INDX_I)
					CALL TRACTION(TRC, (/DMY_GSPT/), GAMMA)
					DIFF_NN%X = DIFF_NN%X + SF_I%VAL(0,0)*TRC(1)%X*DET_M*GSXW(I)
					DIFF_NN%Y = DIFF_NN%Y + SF_I%VAL(0,0)*TRC(1)%Y*DET_M*GSXW(I)
! 					TEST = TEST + DET_M*GSXW(I)
				ENDDO
				INT_F_LN = INT_F_LN + DIFF_NN
			ENDDO
		ENDDO
! 		PRINT*, GAMMA, TEST
	ENDIF
		
END FUNCTION INT_F_LN

END MODULE INTEGRATION
