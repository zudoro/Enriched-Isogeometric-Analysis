MODULE LOADFUNCTION

	USE GEOMETRY

CONTAINS
TYPE(DISPLACEMENT) FUNCTION EX_DISP(PT2D, GAMMA)
	TYPE(POINT2D), INTENT(IN) :: PT2D
	INTEGER, OPTIONAL, INTENT(IN) :: GAMMA
	TYPE(POINT2D) :: NURBS_PT
	REAL*8 :: X, Y, R, THETA, P, I, L, D

	NURBS_PT = GET_PHY_PT(PT2D)
	
	X = NURBS_PT%X; Y= NURBS_PT%Y

	CALL GET_RTHETA(R, THETA, NURBS_PT, GAMMA)

	P = RESULTANT; I = SCALE_FACTOR
	L = LENGTH; D = THICKNESS
	
! 	PRINT*, 'P = ', P
! 	PRINT*, 'I = ', I
! 	PRINT*, 'L = ', L
! 	PRINT*, 'D = ', D
! 	PRINT*, 'E_ZERO = ', E_ZERO
! 	PRINT*, 'V_ZERO = ', V_ZERO
! 	STOP

	EX_DISP = DISPLACEMENT(0.D0,0.D0,0.D0)
	
	IF (PROBLEM.EQ.0) THEN
			EX_DISP%PIX = X
			EX_DISP%PIY = Y
	ELSEIF (PROBLEM.EQ.1) THEN
		EX_DISP%PIX = X**2
		EX_DISP%PIY = Y**2
	ELSEIF (PROBLEM.EQ.2) THEN
		EX_DISP%PIX = (X**2 + X)*(Y - 1.D0)
		EX_DISP%PIY = X*Y**2
	ELSEIF (PROBLEM.EQ.3) THEN
		EX_DISP%PIX = (P*Y/(6.D0*E_ZERO*I))*((6.D0*L - 3.D0*X)*X + (2.D0 + V_ZERO)*(Y**2 - 0.25D0*D**2))
		EX_DISP%PIY = -(P/(6.D0*E_ZERO*I))*(3.D0*V_ZERO*Y**2*(L - X) + (4.D0 + 5.D0*V_ZERO)*X*0.25D0*D**2 + (3.D0*L - X)*X**2)
	ENDIF

END FUNCTION EX_DISP

TYPE(STRESS) FUNCTION EX_STRESS(PT2D, GAMMA)
	
	TYPE(POINT2D), INTENT(IN) :: PT2D
	INTEGER, OPTIONAL, INTENT(IN) :: GAMMA
	
	TYPE(POINT2D) :: NURBS_PT
 	REAL*8 :: R, THETA, EX_STRAIN(3), STRESS_VEC(3), X, Y, P, L, D, I

	NURBS_PT = GET_PHY_PT(PT2D)
	
	X = NURBS_PT%X; Y= NURBS_PT%Y

	CALL GET_RTHETA(R, THETA, NURBS_PT, GAMMA)
	
	P = RESULTANT; I = SCALE_FACTOR
	L = LENGTH; D = THICKNESS

	EX_STRESS = STRESS(0.D0,0.D0,0.D0,0.D0,0.D0)

	IF (PROBLEM.EQ.3) THEN
		EX_STRESS%SXX = P*(L - X)*Y/I
		EX_STRESS%SYY = 0.D0
		EX_STRESS%SXY = -(P/(2.D0*I))*(0.25D0*D**2 - Y**2)
	ELSE
		IF (PROBLEM.EQ.0) THEN
			EX_STRAIN =  (/1.D0, 1.D0, 0.D0/)
		ELSEIF (PROBLEM.EQ.1) THEN
			EX_STRAIN(1) = 2.D0*X
			EX_STRAIN(2) = 2.D0*Y
			EX_STRAIN(3) = 0.D0
		ELSEIF (PROBLEM.EQ.2) THEN
			EX_STRAIN(1) = (2.D0*X + 1.D0)*(Y - 1.D0)
			EX_STRAIN(2) = 2.D0*X*Y
			EX_STRAIN(3) = X**2 + Y**2 + X
		ENDIF
		STRESS_VEC = MATMUL(STRESS_E, EX_STRAIN)
		EX_STRESS = STRESS(STRESS_VEC(1), STRESS_VEC(2), STRESS_VEC(3), 0.D0, 0.D0)
	ENDIF

END FUNCTION EX_STRESS

SUBROUTINE TRACTION(TRC, PTS, GAMMA_INDX)
	INTEGER, INTENT(IN) :: GAMMA_INDX
	TYPE(POINT2D), INTENT(IN) :: PTS(:)
	TYPE(POINT2D), INTENT(OUT) :: TRC(UBOUND(PTS,1))
	
	REAL*8 :: NORMAL(2)
	TYPE(STRESS) :: SIGMA
	INTEGER :: I, N

	N = UBOUND(PTS,1)

	TRC(:) = POINT2D(0.D0, 0.D0)

	IF (GAMMA_INDX.EQ.1) THEN
		NORMAL = (/0.D0, -1.D0/)
	ELSEIF (GAMMA_INDX.EQ.2) THEN
		NORMAL = (/0.D0, 1.D0/)
	ELSEIF (GAMMA_INDX.EQ.3) THEN
		NORMAL = (/1.D0, 0.D0/)
	ENDIF

	DO I=1, N
		SIGMA = EX_STRESS(PTS(I), GAMMA_INDX)
		TRC(I)%X = NORMAL(1)*SIGMA%SXX + NORMAL(2)*SIGMA%SXY
		TRC(I)%Y = NORMAL(2)*SIGMA%SYY + NORMAL(1)*SIGMA%SXY
	ENDDO
	
END SUBROUTINE TRACTION

TYPE(POINT2D) FUNCTION LDFT2D(PT2D, GAMMA)

	TYPE(POINT2D), INTENT(IN) :: PT2D
	INTEGER, OPTIONAL, INTENT(IN) :: GAMMA
	TYPE(POINT2D) :: NURBS_PT
	REAL*8 :: X, Y, R, THETA

	NURBS_PT = GET_PHY_PT(PT2D)
	X = NURBS_PT%X; Y= NURBS_PT%Y

	CALL GET_RTHETA(R, THETA, NURBS_PT, GAMMA)

	IF (PROBLEM.EQ.0) THEN
			LDFT2D = POINT2D(0.D0,0.D0)
	ELSEIF (PROBLEM.EQ.1) THEN
		LDFT2D%X = -2.D0*STRESS_E11
		LDFT2D%Y = -2.D0*STRESS_E22
	ELSEIF (PROBLEM.EQ.2) THEN
		LDFT2D%X = -(10000.D0/91)*(33.D0*Y - 20.D0)
		LDFT2D%Y = -(5000.D0/91)*(66*X + 13.D0)
	ELSEIF (PROBLEM.EQ.3) THEN
		LDFT2D%X = 0.D0
		LDFT2D%Y = 0.D0
	ENDIF

END FUNCTION LDFT2D

END MODULE LOADFUNCTION
